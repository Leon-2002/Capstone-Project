/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.pages;

import com.AdminPages.*;
import javax.swing.JOptionPane;
import com.DataHandler.InventoryHandler;
import com.DatabaseConnector.DatabaseConnector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import static com.notification.NotificationFunctions.addNotification;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author loena
 */
public class Borrowing extends javax.swing.JFrame {
        private int studentId;
    /**
     * Creates new form Inventory
     */
    public Borrowing(String email, String id) {
        initComponents();
        setLocationRelativeTo(null);
//         setUndecorated(true);
            setVisible(true);
         this.studentId = Integer.parseInt(id); // convert id to int
       
        
//     jLabel2.setText(email);
//     jLabel5.setText(id);

   
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        EquipmentID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        AddBtn = new javax.swing.JButton();
        borrowBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Borrowingtable = new javax.swing.JTable();
        QuantityTf = new javax.swing.JSpinner();
        backbtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ResetBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Borrowing ");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(50, 20, 200, 34);

        jLabel3.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Equipment name");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(50, 70, 145, 33);

        EquipmentID.setBackground(new java.awt.Color(255, 255, 255));
        EquipmentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EquipmentIDActionPerformed(evt);
            }
        });
        jPanel1.add(EquipmentID);
        EquipmentID.setBounds(50, 110, 132, 30);

        jLabel4.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Quantity");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(50, 160, 145, 33);

        AddBtn.setBackground(new java.awt.Color(102, 0, 255));
        AddBtn.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        AddBtn.setForeground(new java.awt.Color(255, 255, 255));
        AddBtn.setText("ADD");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });
        jPanel1.add(AddBtn);
        AddBtn.setBounds(50, 250, 130, 40);

        borrowBtn.setBackground(new java.awt.Color(102, 0, 255));
        borrowBtn.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        borrowBtn.setForeground(new java.awt.Color(255, 255, 255));
        borrowBtn.setText("Borrow");
        borrowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowBtnActionPerformed(evt);
            }
        });
        jPanel1.add(borrowBtn);
        borrowBtn.setBounds(50, 500, 130, 40);

        Borrowingtable.setBackground(new java.awt.Color(255, 255, 255));
        Borrowingtable.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        Borrowingtable.setForeground(new java.awt.Color(0, 0, 0));
        Borrowingtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Equiptment ID", "Equipment", "Title Category", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Borrowingtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BorrowingtableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Borrowingtable);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(210, 60, 740, 480);
        jPanel1.add(QuantityTf);
        QuantityTf.setBounds(50, 200, 130, 30);
        QuantityTf.setValue(1);

        backbtn.setBackground(new java.awt.Color(102, 0, 255));
        backbtn.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        backbtn.setForeground(new java.awt.Color(255, 255, 255));
        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });
        jPanel1.add(backbtn);
        backbtn.setBounds(860, 10, 100, 40);

        jLabel2.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jLabel2);
        jLabel2.setBounds(280, 30, 190, 20);
        jPanel1.add(jLabel5);
        jLabel5.setBounds(580, 25, 120, 20);

        ResetBtn.setBackground(new java.awt.Color(102, 0, 255));
        ResetBtn.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        ResetBtn.setForeground(new java.awt.Color(255, 255, 255));
        ResetBtn.setText("Clear");
        ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetBtnActionPerformed(evt);
            }
        });
        jPanel1.add(ResetBtn);
        ResetBtn.setBounds(50, 300, 130, 40);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 976, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        // TODO add your handling code here:
      int id = Integer.parseInt(EquipmentID.getText());
        int quantity= (int) QuantityTf.getValue();
        
    searchAndInsertEquipment(id, quantity);
       EquipmentID.setText("");
       QuantityTf.setValue(1);
    }//GEN-LAST:event_AddBtnActionPerformed

    private void borrowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowBtnActionPerformed
        // TODO add your handling code here:
        saveBorrowingData();
        clearBorrowingTable();
    }//GEN-LAST:event_borrowBtnActionPerformed

    private void BorrowingtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BorrowingtableMouseClicked
        // TODO add your handling code here:
          int i = Borrowingtable.getSelectedRow();
        TableModel model = Borrowingtable.getModel();
        

        EquipmentID.setText(model.getValueAt(i,1).toString());
        // to get the data from the spinner
        String spinner = model.getValueAt(i,2).toString();
        int spinner1 = Integer.parseInt(spinner);
        QuantityTf.setValue(spinner1);
        
     
        
        
        
    }//GEN-LAST:event_BorrowingtableMouseClicked
   public void searchAndInsertEquipment(int equipmentId, int quantity) {
    try (Connection conn = DatabaseConnector.getConnection();
         PreparedStatement pstmt = conn.prepareStatement("SELECT equipment_name, category, quantity, available_quantity FROM inventorytable WHERE id = ?")) {
        
        pstmt.setInt(1, equipmentId);
        try (ResultSet rs = pstmt.executeQuery()) {
            if (rs.next()) {
                String name = rs.getString("equipment_name");
                String category = rs.getString("category");
                int availableQuantity = rs.getInt("available_quantity");

                // Check if the requested quantity is less than or equal to the available quantity
                if (quantity <= availableQuantity) {
                    // Check if the Equipment ID already exists in the JTable
                    DefaultTableModel model = (DefaultTableModel) Borrowingtable.getModel();
                    boolean exists = false;
                    for (int i = 0; i < model.getRowCount(); i++) {
                        if ((int) model.getValueAt(i, 0) == equipmentId) {
                            exists = true;
                            break;
                        }
                    }

                    if (!exists) {
                        // Insert data into the JTable
                        if (model == null) {
                            model = new DefaultTableModel();
                            model.addColumn("Equipment ID");
                            model.addColumn("Name");
                            model.addColumn("Category");
                            model.addColumn("Quantity");
                            Borrowingtable.setModel(model);
                        }
                        model.addRow(new Object[]{equipmentId, name, category, quantity});
                    } else {
                        // Display a message indicating that the Equipment ID already exists in the table
                        JOptionPane.showMessageDialog(null, "Equipment ID already exists in the table", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    // Show an error message if requested quantity exceeds available quantity
                    JOptionPane.showMessageDialog(null, "Request quantity exceeds available quantity", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Item not found in the inventory
                JOptionPane.showMessageDialog(null, "Equipment not found in the inventory", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException e) {
        System.out.println("Error searching database: " + e.getMessage());
        JOptionPane.showMessageDialog(null, "Error searching database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        // TODO add your handling code here:
        
        
        dispose();
        Frontpage page = new Frontpage();
        page.setVisible(true);
    }//GEN-LAST:event_backbtnActionPerformed

    private void ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetBtnActionPerformed
           // TODO add your handling code here:

            DefaultTableModel model = (DefaultTableModel) Borrowingtable.getModel();
                       model.setRowCount(0);
    }//GEN-LAST:event_ResetBtnActionPerformed

    private void EquipmentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EquipmentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EquipmentIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Borrowing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Borrowing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Borrowing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Borrowing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    
     public static void InventoryTable(){
    
        
    }
     
     public void clearBorrowingTable() {
    DefaultTableModel model = (DefaultTableModel) Borrowingtable.getModel();
    model.setRowCount(0);
}
     
     
     
//   public void saveBorrowingData() {
//    DefaultTableModel model = (DefaultTableModel) Borrowingtable.getModel();
//    try (Connection conn = DatabaseConnector.getConnection();
//         PreparedStatement pstmt = conn.prepareStatement("INSERT INTO borrowingtable (student_id, equipment_id, borrow_date, return_date, quantity_borrowed, lost_quantity ,status) VALUES (?, ?, ?, NULL, ?, NULL, 'Borrowed')")) {
//        for (int i = 0; i < model.getRowCount(); i++) {
//            // Adjust indices to match your table structure
//            int equipmentId = (int) model.getValueAt(i, 0);
//            int quantity = (int) model.getValueAt(i, 3);
//
//            pstmt.setInt(1, studentId); // Use the class-level studentId
//            pstmt.setInt(2, equipmentId);
//            pstmt.setDate(3, new java.sql.Date(System.currentTimeMillis())); // current date only
//            pstmt.setInt(4, quantity);
//
//            pstmt.addBatch(); // Add to batch
//        }
//        pstmt.executeBatch(); // Execute all queries in batch
//
//        JOptionPane.showMessageDialog(null, "Borrowing successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
//         
//    } catch (SQLException e) {
//        System.out.println("Error saving borrowing data: " + e.getMessage());
//        JOptionPane.showMessageDialog(null, "Error saving borrowing data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//    }
//}
     
     public void saveBorrowingData() {
    DefaultTableModel model = (DefaultTableModel) Borrowingtable.getModel();
    try (Connection conn = DatabaseConnector.getConnection();
         PreparedStatement pstmt = conn.prepareStatement("INSERT INTO borrowingtable (student_id, equipment_id, borrow_date, return_date, quantity_borrowed, lost_quantity ,status) VALUES (?, ?, ?, NULL, ?, NULL, 'Borrowed')")) {

        // Prepare SQL queries to fetch student and equipment names
        String studentNameQuery = "SELECT firstname, lastname FROM studentstbl WHERE id = ?";
        String equipmentNameQuery = "SELECT equipment_name FROM inventorytable WHERE id = ?";

        for (int i = 0; i < model.getRowCount(); i++) {
            // Adjust indices to match your table structure
            int equipmentId = (int) model.getValueAt(i, 0);
            int quantity = (int) model.getValueAt(i, 3);

            // Set parameters for inserting borrowing data
            pstmt.setInt(1, studentId); // Use the class-level studentId
            pstmt.setInt(2, equipmentId);
            pstmt.setDate(3, new java.sql.Date(System.currentTimeMillis())); // current date only
            pstmt.setInt(4, quantity);

            pstmt.addBatch(); // Add to batch
        }

        // Execute batch insertion
        pstmt.executeBatch(); // Execute all queries in batch

        // Now, notify the student and equipment borrowed
        // Fetch student's full name
        try (PreparedStatement studentStmt = conn.prepareStatement(studentNameQuery)) {
            studentStmt.setInt(1, studentId);
            try (ResultSet studentRs = studentStmt.executeQuery()) {
                if (studentRs.next()) {
                    String studentName = studentRs.getString("firstname") + " " + studentRs.getString("lastname");

                    // Fetch equipment name
                    try (PreparedStatement equipmentStmt = conn.prepareStatement(equipmentNameQuery)) {
                        equipmentStmt.setInt(1, (int) model.getValueAt(0, 0)); // Get equipment name from the first row of the table
                        try (ResultSet equipmentRs = equipmentStmt.executeQuery()) {
                            if (equipmentRs.next()) {
                                String equipmentName = equipmentRs.getString("equipment_name");

                                // Create notification
                                String notificationMessage = studentName.toUpperCase() + " borrowed " + equipmentName;
                                addNotification(notificationMessage); // Add notification to database
                            }
                        }
                    }
                }
            }
        }

        JOptionPane.showMessageDialog(null, "Borrowing successful!", "Success", JOptionPane.INFORMATION_MESSAGE);

    } catch (SQLException e) {
        System.out.println("Error saving borrowing data: " + e.getMessage());
        JOptionPane.showMessageDialog(null, "Error saving borrowing data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

   


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JTable Borrowingtable;
    private javax.swing.JTextField EquipmentID;
    private javax.swing.JSpinner QuantityTf;
    private javax.swing.JButton ResetBtn;
    private javax.swing.JButton backbtn;
    private javax.swing.JButton borrowBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
